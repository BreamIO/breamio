// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/zephyyrr/gobii/gaze (interfaces: EyeTracker)

package mock

import (
	gomock "code.google.com/p/gomock/gomock"
	gaze "github.com/zephyyrr/gobii/gaze"
)

// Mock of EyeTracker interface
type MockEyeTracker struct {
	ctrl     *gomock.Controller
	recorder *_MockEyeTrackerRecorder
}

// Recorder for MockEyeTracker (not exported)
type _MockEyeTrackerRecorder struct {
	mock *MockEyeTracker
}

func NewMockEyeTracker(ctrl *gomock.Controller) *MockEyeTracker {
	mock := &MockEyeTracker{ctrl: ctrl}
	mock.recorder = &_MockEyeTrackerRecorder{mock}
	return mock
}

func (_m *MockEyeTracker) EXPECT() *_MockEyeTrackerRecorder {
	return _m.recorder
}

func (_m *MockEyeTracker) AddPointToCalibration(_param0 *gaze.Point2D, _param1 gaze.Callback) {
	_m.ctrl.Call(_m, "AddPointToCalibration", _param0, _param1)
}

func (_mr *_MockEyeTrackerRecorder) AddPointToCalibration(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddPointToCalibration", arg0, arg1)
}

func (_m *MockEyeTracker) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEyeTrackerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockEyeTracker) ComputeAndSetCalibration(_param0 gaze.Callback) {
	_m.ctrl.Call(_m, "ComputeAndSetCalibration", _param0)
}

func (_mr *_MockEyeTrackerRecorder) ComputeAndSetCalibration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ComputeAndSetCalibration", arg0)
}

func (_m *MockEyeTracker) Connect() error {
	ret := _m.ctrl.Call(_m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEyeTrackerRecorder) Connect() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect")
}

func (_m *MockEyeTracker) IsConnected() bool {
	ret := _m.ctrl.Call(_m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockEyeTrackerRecorder) IsConnected() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsConnected")
}

func (_m *MockEyeTracker) RemovePointFromCalibration(_param0 *gaze.Point2D, _param1 gaze.Callback) {
	_m.ctrl.Call(_m, "RemovePointFromCalibration", _param0, _param1)
}

func (_mr *_MockEyeTrackerRecorder) RemovePointFromCalibration(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemovePointFromCalibration", arg0, arg1)
}

func (_m *MockEyeTracker) SetOption(_param0 gaze.EyeTrackerOption, _param1 int) error {
	ret := _m.ctrl.Call(_m, "SetOption", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEyeTrackerRecorder) SetOption(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetOption", arg0, arg1)
}

func (_m *MockEyeTracker) StartCalibration(_param0 gaze.Callback) {
	_m.ctrl.Call(_m, "StartCalibration", _param0)
}

func (_mr *_MockEyeTrackerRecorder) StartCalibration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartCalibration", arg0)
}

func (_m *MockEyeTracker) StartTracking(_param0 gaze.GazeFunc) error {
	ret := _m.ctrl.Call(_m, "StartTracking", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEyeTrackerRecorder) StartTracking(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartTracking", arg0)
}

func (_m *MockEyeTracker) StopCalibration(_param0 gaze.Callback) {
	_m.ctrl.Call(_m, "StopCalibration", _param0)
}

func (_mr *_MockEyeTrackerRecorder) StopCalibration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopCalibration", arg0)
}

func (_m *MockEyeTracker) URL() string {
	ret := _m.ctrl.Call(_m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockEyeTrackerRecorder) URL() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "URL")
}
